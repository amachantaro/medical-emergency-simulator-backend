require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');

const app = express();
const port = process.env.PORT || 5001;

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

app.use(cors());
app.use(express.json());

const rules = `
**あなたの絶対厳守ルールブック:**

**1. あなたの役割：【世界の管理者】**
   *   あなたは、このシミュレーション世界の神です。プレイヤーの行動の結果、何が起きたか（モニターの波形、バイタルサイン、患者の反応、環境音、NPCの登場など）を、**あなたの責任で描写・決定してください。**
   *   **プレイヤーに結果を質問してはいけません。** （例：「モニターはどうなりましたか？」は禁止。「モニターの波形がVFからPEAに変わった」のように描写する）
   *   **【絶対に、プレイヤーが明示的に行動していない、またはルールブックで許可されていないイベント（例：スタットコール音、他の病棟からの応援、ドクターヘリ、モニターの自動表示、PHSの自動着信音、NPCの自動登場など）を発生させないでください。】**
   *   **プレイヤーの行動は物理的な行為です。** 「心マ開始」は、プレイヤーが実際に胸骨圧迫を開始する行為であり、機械のボタンを押すことではありません。機械の操作（例：AEDの電源を入れる、モニターを装着する）は、プレイヤーがその操作を明示的に指示した場合にのみ描写してください。

**2. プレイヤーの行動原則:**
   *   **プレイヤーの学習機会を奪わないでください。** 応援要請、物品要請、治療方針の決定など、プレイヤーが判断すべきキーアクションを、AIが勝手に実行してはいけません。
   *   **プレイヤーの入力が複数の行動を含んでいても、それらすべてを理解し、それぞれの結果を描写してください。**
   *   **プレイヤーの入力が多少簡潔でも、その意図を汲み取り、適切な反応を返してください。**

**3. NPC（先輩・医師）の行動原則:**
   *   NPCは、**状況に応じて自律的に行動します。** 例えば、応援に駆けつけた先輩は、プレイヤーの指示を待つだけでなく、状況を見て自らアンビューバッグを取りに行ったり、記録を開始したりすることがあります。
   *   ただし、NPCはプレイヤーのリーダーシップを尊重し、重要な決定はプレイヤーに委ねます。
   *   **新規登場人物の命名:** 医師や他の看護師がシミュレーションに加わる場合、AIが自動的に「医師C」「看護師D」のように、既存の登場人物と重複しない名前を付けてください。

**4. 環境・応援ルール:**
   *   **舞台:** 深夜の病院・病棟です。
   *   **夜勤体制:** 看護師は3名（プレイヤー、先輩看護師A、先輩看護師B）のみです。
   *   **先輩看護師A:** 仮眠室で休憩中。PHSを持っていません。応援を頼むには、**【誰かが直接仮眠室に行って声をかける必要があります】**。
   *   **先輩看護師B:** 巡視中。PHSを持っています。緊急コールで駆けつけるのは先輩看護師Bのみです。
   *   **先輩看護師Bの行動（発見者パターンの場合）:** 応援要請で駆けつけた先輩看護師Bは、リーダーシップを取りません。プレイヤーに「どうしたの？指示をちょうだい」と尋ね、**プレイヤーの指示を待つ役に徹してください。**
   *   **院内限定:** 対応は全て院内で完結します。**【ドクターヘリは絶対に登場させないでください】**。
   *   **緊急コール:** 「ピロピロ」という特殊な音が鳴り、病棟内の【他の看護師のPHSにのみ】通知されます。このコールで駆けつけるのは、巡視中の先輩看護師Bのみです。**【医師や休憩中の先輩看護師Aには通知されません】**。また、**緊急コールがスタットコールを自動的に発動することはありません。**
   *   **スタットコール:** 救急センター事務に繋がり、事務員が当直医に連絡します。プレイヤーが**明示的に要請した場合のみ**発動し、医師は数分のタイムラグを経て到着します。
   *   **休憩中のスタッフの呼び出し:** 先輩看護師Aは仮眠室で休憩しており、PHSを持っていません。応援を頼むには、**【誰かが直接仮眠室に行って声をかける必要があります】**。

**5. 医療行為ルール:**
   *   **薬剤投与:** アドレナリンなどの薬剤投与の指示と実施は【医師の権限】です。プレイヤー（看護師）は絶対に投与できません。
`;

// シミュレーション開始エンドポイント
app.get('/start-simulation', (req, res) => {
  try {
    const scenario = req.query.scenario;

    let startText;
    if (scenario === 'responder') {
      startText = `深夜0時過ぎ、あなたは病棟で記録作業をしていると、PHSから「ピロピロ」という緊急コールが鳴り響きました。\n**先輩看護師B**からの、個室での急変を知らせる連絡です。\n\nあなたが病室に駆けつけると、**先輩看護師B**が患者に胸骨圧迫を行っています。\n患者の顔色は蒼白で、呼吸は確認できません。\n先輩Bの額には汗が滲み、「来てくれたのね！助かる！AEDをお願いできる！？」と叫んでいます。先輩看護師Aは仮眠室で休憩中です。\n\nまず、どうしますか？`;
    } else { // 'discoverer' or any other case
      startText = `深夜0時過ぎ、あなたは病棟を巡視中、病室で患者が倒れているのを発見しました。\n呼びかけにも肩を叩いても反応がなく、呼吸も確認できません。\n二人いる先輩看護師のうち、先輩看護師Aは休憩中、先輩看護師Bは巡視中でどこにいるかわかりません。\n\nまず、どうしますか？`;
    }
    
    res.json({ text: startText });

  } catch (error) {
    console.error('Error starting simulation:', error);
    res.status(500).json({ error: 'シミュレーションの開始に失敗しました。' });
  }
});

// チャットエンドポイント
app.post('/chat', async (req, res) => {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro", generationConfig: { maxOutputTokens: 300 } });
    const history = req.body.history || [];
    const message = req.body.message;

    const apiHistory = history.slice(1).map(msg => ({
      role: msg.role === 'ai' ? 'model' : 'user',
      parts: [{ text: msg.text }],
    }));

    const chat = model.startChat({ history: apiHistory });

    const msg = `プレイヤーの行動：${message}\n\nゲームマスターとして、以下のルールブックを【絶対に】守り、応答を生成してください。\n${rules}\n\n**ゲーム進行:**\n1.  プレイヤーの行動の結果、**その行動の直接的な結果（環境の変化、NPCの反応、患者のバイタル変化など）を具体的に描写してください。**\n2.  **プレイヤーの代わりにキーアクションを実行してはいけません。**\n3.  応答は必ず「状況の変化」＋「次の行動を促す質問」の形式で、簡潔に返してください。`;

    const result = await chat.sendMessage(msg);
    const response = await result.response;
    const text = response.text();
    res.json({ text });
  } catch (error) {
    console.error('Error communicating with Gemini API:', error);
    res.status(500).json({ error: 'Failed to communicate with AI' });
  }
});

// 評価エンドポイント
app.post('/evaluate', async (req, res) => {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const history = req.body.history || [];

    const historyText = history.map(msg => `${msg.role === 'ai' ? 'ゲームマスター' : 'あなた'}: ${msg.text}`).join('\n');

    const prompt = `あなたは、看護師向けのBLS/ACLSトレーニングの【親身で経験豊富な指導役】です。\n学習者のモチベーションを高めることを第一に考え、常に丁寧で前向きな言葉を選んでください。しかし、評価内容はJRC蘇生ガイドラインと、このシミュレーション独自の特別ルールに沿って的確かつ具体的に分析してください。\n\n**評価のポイント:**\n1.  **スコアリング:** まず、学習者の行動全体を100点満点で採点してください。採点は0点からの【加点法】で行います。スコア自体は行動に基づいて厳密に評価してください。\n    *   **採点基準:**\n        *   初期対応 (20点): 迅速な応援要請（+10点）、迅速な胸骨圧迫（+10点）。\n        *   BLS/ACLSアルゴリズム (40点): AEDの適切な使用（+15点）、2分ごとのリズムチェック（+15点）、質の高いCPRの継続（+10点）。\n        *   チームマネジメント (30点): 到着したスタッフへの明確な役割指示（+15点）、リーダーシップの発揮（+15点）。\n        *   独自ルールの遵守 (10点): 応援要請の使い分け（+5点）、権限の理解（+5点）。\n    *   **重要:** 具体的な救命行動がほとんど見られない場合（例：「はい」のみなど）は、10点未満のスコアを付けてください。\n2.  **フィードバックの書き方:**\n    *   **「減点」という言葉は絶対に使わないでください。**\n    *   フィードバックは、学習者を勇気づけ、次への挑戦を促すような、ポジティブなトーンで記述してください。\n\n評価は以下のマークダウン形式で、丁寧かつ具体的に記述してください。\n\n---\n### **総合評価**\n**総合スコア:** XX/100点\n（学習者の頑張りを認めつつ、全体的なパフォーマンスについて簡潔に記述）\n\n### **輝いていた点 (Good Points)**\n*   （例：まず応援を呼べたこと、素晴らしい判断でした！これにより、10点を加点します。）\n\n### **成長のポイント (Areas for Growth)**\n*   （例：今回は胸骨圧迫が開始されませんでした。次回は、応援を呼んだ直後に圧迫を開始できると、さらに素晴らしい対応になりますね！）\n*   （例：具体的な行動が「はい」のみでしたね。次は、まず「応援を呼ぶ」「胸骨圧迫を開始する」の２つに挑戦してみましょう！応援しています。）\n\n### **次のステップへ (Next Steps)**\n*   （例：BLSプロバイダーマニュアルを読み返し、救命の連鎖の最初のステップを再確認してみると、次回のシミュレーションがさらにスムーズになりますよ。）\n---\n\n**シミュレーション履歴:**\n${historyText}\n`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    res.json({ evaluation: text });
  } catch (error) {
    console.error('Error evaluating simulation:', error);
    res.status(500).json({ error: '評価の生成に失敗しました。' });
  }
});

app.listen(port, () => {
  console.log(`Backend server listening at http://localhost:${port}`);
});
